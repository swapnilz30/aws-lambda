service: lambda-aws-python-http-api
frameworkVersion: '3'
provider:
  name: aws
  runtime: python3.9
  region: us-east-1
  profile: serverless-admin
  stage: dev
  timeout: 10
  memorySize: 128
  architecture: x86_64
  environment:
    DYNAMODB_TABLE: ${self:custom.dynamotable}
    REGION_NAME: ${self:provider.region}
  iam:
    role:
      statements:
        - Effect: Allow
          Action: 
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}
functions:
  create:
    handler: handler.create
    layers:
      - arn:aws:lambda:us-east-1:770693421928:layer:Klayers-p39-pillow:1
    events:
      - http:
          path: posts/create
          method: post
  get:
    handler: handler.get
    events:
      - http:
          path: posts/get/{postID}
          method: get
  update:
    handler: handler.update
    events:
      - http:
          path: posts/update/{postID}
          method: put
  delete:
    handler: handler.delete
    events:
      - http:
          path: posts/delete/{postID}
          method: delete
resources:
  Resources:
    postsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
plugins:
  - serverless-python-requirements
custom:
  dynamotable: test-table
  pythonRequirements:
    dockerizePip: non-linux